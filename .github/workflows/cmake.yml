name: CMake

on:
  push:
    branches: ["main", "BasicNN", "tests", "cicd", "templates"]
  pull_request:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  ACT: false

jobs:
  configure-and-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: gcc:11.3.0

    steps:
      - uses: actions/checkout@v3

      - name: Setup Container
        run: apt-get -y update && apt-get install -y --no-install-recommends software-properties-common build-essential cmake clang-format

      - name: Install CMake
        run: wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null

      - run: echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null

      - run: apt-get -y update

      - run: apt-get install -y kitware-archive-keyring

      - run: apt-get install -y cmake

      - run: cmake --version

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: ./scripts/configure.sh

      - name: bin
        run: ./scripts/build.sh

      - run: apt update && apt install -y nodejs

      - name: Upload test binary
        uses: actions/upload-artifact@v3
        with:
          name: test
          path: bin/test/DeepPPTest

      - name: Upload benchmark binary
        uses: actions/upload-artifact@v3
        with:
          name: benchmark
          path: bin/benchmark/DeepPPBenchmark

  #New job
  test:
    runs-on: ubuntu-latest
    container:
      image: gcc:11.3.0
      # image: node:19-slim
    needs: configure-and-build
    steps:
      - uses: actions/checkout@v3

      - run: apt update && apt install -y nodejs

      - name: Download test binary
        uses: actions/download-artifact@v3
        with:
          name: test

      - name: Enable executable
        run: chmod +x ./DeepPPTest

      - name: Run all tests
        if: github.ref == 'refs/heads/main'
        run: ./DeepPPTest

      - name: Run tests
        if: github.ref != 'refs/heads/main'
        run: ./DeepPPTest --gtest_filter="-*MnistTest.IntegrationTest"

  benchmark:
    runs-on: ubuntu-latest
    container:
      image: gcc:11.3.0
      # image: node:19-slim

    needs: configure-and-build
    steps:
      - uses: actions/checkout@v3

      - run: apt update && apt install -y nodejs

      - name: Download benchmark binary
        uses: actions/download-artifact@v3
        with:
          name: benchmark

      - name: Enable executable
        run: chmod +x ./DeepPPBenchmark

      - name: Run benchmarks
        run: ./DeepPPBenchmark

  format-check:
    runs-on: ubuntu-latest
    needs: [test, benchmark]
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format
        run: ./scripts/format.sh

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[bot] refactor: reformat code by workflow"
